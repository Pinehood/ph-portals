name: CI/CD
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [develop]
jobs:
  integrate:
    name: Install, Build, Lint & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: "npm"
      - name: Install
        run: npm ci
      - name: Build
        run: npm run $BUILD_CMD
        env:
          BUILD_CMD: ${{ vars.BUILD_CMD }}
      - name: Lint
        if: ${{ vars.RUN_LINT == 'true' }}
        run: npm run lint
      - name: Test
        if: "!contains(github.event.head_commit.message, '--skip-tests') && vars.RUN_TEST == 'true'"
        run: npm run test
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"
  build:
    needs: integrate
    name: Build Docker Image
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build & Upload Image to AWS ECR
        run: |
          docker build -f ./Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:latest-$BRANCH .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest-$BRANCH
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          BRANCH: ${{ github.ref_name }}
  deploy:
    needs: build
    name: Deploy Docker Image
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - name: Pull Latest Image
        uses: appleboy/ssh-action@v0.1.4
        env:
          ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          ECR_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          REGION: ${{ vars.AWS_REGION }}
          BRANCH: ${{ github.ref_name }}
        with:
          port: 22
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          passphrase: ${{ secrets.VPS_KEY_PASSPHRASE }}
          envs: ECR_REGISTRY,ECR_REPOSITORY,ACCESS_KEY_ID,SECRET_ACCESS_KEY,REGION,BRANCH
          script: |
            aws --profile default configure set aws_access_key_id "$ACCESS_KEY_ID"
            aws --profile default configure set aws_secret_access_key "$SECRET_ACCESS_KEY"
            aws --profile default configure set aws_default_region "$REGION"
            aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
            docker pull $ECR_REGISTRY/$ECR_REPOSITORY:latest-$BRANCH
